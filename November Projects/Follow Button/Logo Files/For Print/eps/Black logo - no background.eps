%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 822
%%HiResBoundingBox: 0 0 2391.1199 821.03998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 821.03998 re
W
q
[0.24 0 0 -0.24 0 821.03998] cm
q
0 0 9962.5 3418.75 re
W*
q
[33.146141 0 0 33.133842 100.812546 21.205601] cm
54.900002 65.599998 m
45.100002 65.599998 l
44.600002 65.599998 44.100002 65.199997 44.100002 64.599998 c
44.100002 64 44.500004 63.599998 45.100002 63.599998 c
54.900002 63.599998 l
55.400002 63.599998 55.900002 64 55.900002 64.599998 c
55.900002 65.199997 55.5 65.599998 54.900002 65.599998 c
h
82.300003 20.6 m
82.300003 23 80.300003 25 77.900002 25 c
77.099998 25 76.300003 24.799999 75.700005 24.4 c
59.5 41.599998 l
60.099998 42.299999 60.400002 43.199997 60.400002 44.199997 c
60.400002 46.599998 58.400002 48.599998 56 48.599998 c
53.599998 48.599998 51.599998 46.599998 51.599998 44.199997 c
51.599998 43.199997 51.899998 42.299995 52.5 41.599998 c
43.099998 31.399998 l
42.299999 32.099998 41.299999 32.599998 40.099998 32.599998 c
39.099998 32.599998 38.099998 32.199997 37.399998 31.599998 c
25.299999 46.299999 l
26.099998 47.099998 26.599998 48.200001 26.599998 49.399998 c
26.599998 51.799999 24.599998 53.799999 22.199999 53.799999 c
19.799999 53.799999 17.799999 51.799999 17.799999 49.399998 c
17.799999 46.999996 19.799999 44.999996 22.199999 44.999996 c
22.699999 44.999996 23.199999 45.099995 23.699999 45.299995 c
36.200001 30 l
35.900002 29.4 35.799999 28.799999 35.799999 28.1 c
35.799999 25.700001 37.799999 23.700001 40.200001 23.700001 c
42.600002 23.700001 44.600002 25.700001 44.600002 28.1 c
44.600002 28.700001 44.500004 29.200001 44.300003 29.700001 c
54 40.299999 l
54.599998 40 55.299999 39.799999 56 39.799999 c
56.700001 39.799999 57.400002 40 58 40.299999 c
74.199997 23 l
73.699997 22.299999 73.399994 21.4 73.399994 20.5 c
73.399994 18.1 75.399994 16.1 77.799995 16.1 c
80.199997 16.1 82.300003 18.200001 82.300003 20.6 c
h
24.6 49.400002 m
24.6 48 23.5 46.900002 22.1 46.900002 c
20.700001 46.900002 19.6 48 19.6 49.400002 c
19.6 50.800003 20.700001 51.900002 22.1 51.900002 c
23.5 51.900002 24.6 50.799999 24.6 49.400002 c
h
42.599998 28.1 m
42.599998 26.700001 41.5 25.6 40.099998 25.6 c
38.699997 25.6 37.599998 26.700001 37.599998 28.1 c
37.599998 29.5 38.699997 30.6 40.099998 30.6 c
41.5 30.6 42.599998 29.5 42.599998 28.1 c
h
58.5 44.200001 m
58.5 42.799999 57.400002 41.700001 56 41.700001 c
54.599998 41.700001 53.5 42.799999 53.5 44.200001 c
53.5 45.600002 54.599998 46.700001 56 46.700001 c
57.400002 46.700001 58.5 45.599998 58.5 44.200001 c
h
80.300003 20.6 m
80.300003 19.200001 79.200005 18.1 77.800003 18.1 c
76.400002 18.1 75.300003 19.200001 75.300003 20.6 c
75.300003 22 76.400002 23.1 77.800003 23.1 c
79.200005 23.1 80.300003 22 80.300003 20.6 c
h
94.199997 14.3 m
94.199997 65.800003 l
94.199997 69.200005 91.5 71.900002 88.099998 71.900002 c
56.099998 71.900002 l
58.799999 83.599998 l
63.099998 83.599998 l
65.900002 83.599998 68.099998 85.900002 68.099998 88.599998 c
68.099998 88.699997 l
68.099998 91.5 65.799995 93.699997 63.099998 93.699997 c
36.900002 93.699997 l
34.100002 93.699997 31.900002 91.399994 31.900002 88.699997 c
31.900002 88.599998 l
31.900002 85.799995 34.200001 83.599998 36.900002 83.599998 c
41.200001 83.599998 l
43.900002 71.900002 l
11.900002 71.900002 l
8.500002 71.900002 5.800002 69.200005 5.800002 65.800003 c
5.800002 14.3 l
5.800002 10.9 8.500002 8.200001 11.900002 8.200001 c
88.099998 8.200001 l
91.5 8.2 94.199997 10.9 94.199997 14.3 c
h
36.900002 85.5 m
35.200001 85.5 33.800003 86.900002 33.800003 88.599998 c
33.800003 88.699997 l
33.800003 90.399994 35.200005 91.799995 36.900002 91.799995 c
63.100002 91.799995 l
64.800003 91.799995 66.200005 90.399994 66.200005 88.699997 c
66.200005 88.599998 l
66.200005 86.900002 64.800003 85.5 63.100006 85.5 c
36.900002 85.5 l
h
54.200001 71.900002 m
45.900002 71.900002 l
43.200001 83.599998 l
56.900002 83.599998 l
54.200001 71.900002 l
h
92.300003 59.900002 m
7.7 59.900002 l
7.7 65.800003 l
7.7 68.100006 9.6 70 11.9 70 c
88.099998 70 l
90.400002 70 92.299995 68.099998 92.299995 65.800003 c
92.299995 59.900002 l
92.300003 59.900002 l
h
92.300003 14.3 m
92.300003 12 90.400002 10.1 88.100006 10.1 c
11.9 10.1 l
9.599999 10.1 7.7 12 7.7 14.3 c
7.7 58 l
92.299995 58 l
92.299995 14.3 l
92.300003 14.3 l
h
f
Q
q
[73.918228 0 0 73.890808 3617.0154 -120.855865] cm
2.6 39.560001 m
2.6 9.960001 l
4.24 9.960001 l
4.48 9.960001 4.68 10.160001 4.68 10.400001 c
4.68 40 l
3.04 40 l
2.8 40 2.6 39.799999 2.6 39.560001 c
2.6 39.560001 l
h
9.68 20 m
11.480001 20 l
11.480001 21.32 l
11.480001 21.32 12.280001 20 15 20 c
19.559999 20 l
19.559999 21.24 l
19.559999 21.48 19.359999 21.639999 19.119999 21.639999 c
14.199999 21.639999 l
11.399999 21.639999 11.479999 24.52 11.479999 24.52 c
11.479999 40 l
9.679998 40 l
9.679998 20 l
9.68 20 l
h
32.919998 19.959999 m
35.679996 19.959999 37.879997 22.24 37.879997 25 c
37.879997 39.560001 l
37.879997 39.800003 37.679996 40 37.439999 40 c
27.399998 40 l
24.639997 40 22.439999 37.759998 22.439999 35 c
22.439999 32.919998 l
22.439999 30.119999 24.639999 27.879997 27.399998 27.879997 c
35.639999 27.879997 l
35.880001 27.879997 36.040001 27.719997 36.079998 27.439997 c
36.079998 24.839996 l
36.079998 23.079996 34.679996 21.639996 32.919998 21.639996 c
24.559998 21.639996 l
24.359997 21.639996 24.159998 21.439995 24.159998 21.199995 c
24.159998 19.959995 l
32.919998 19.959995 l
32.919998 19.959999 l
h
27.4 38.240002 m
36.080002 38.240002 l
36.080002 29.400002 l
36 29.480001 35.880001 29.560001 35.760002 29.560001 c
27.400002 29.560001 l
25.640001 29.560001 24.240002 31.000002 24.240002 32.760002 c
24.240002 35.080002 l
24.240002 36.84 25.640001 38.240002 27.400002 38.240002 c
27.4 38.240002 l
h
53.119999 29.48 m
52.439999 29.84 l
57.399998 39.959999 l
55.799999 39.959999 l
55.559998 39.959999 55.32 39.799999 55.200001 39.599998 c
50.600002 30.079998 l
45.120003 30.079998 l
44.760002 30.079998 44.480003 30.399998 44.440002 30.759998 c
44.440002 39.559998 l
44.440002 39.799999 44.240002 39.999996 44.000004 39.999996 c
42.640003 39.999996 l
42.640003 12.839996 l
44.000004 12.839996 l
44.240005 12.839996 44.440002 13.039996 44.440002 13.279996 c
44.440002 29.079996 l
44.560001 28.679996 45.000004 28.399996 45.560001 28.399996 c
50.720001 28.399996 l
52.48 28.399996 54.440002 26.999996 54.440002 25.239996 c
54.440002 20.399996 l
54.440002 20.159996 54.640003 19.959995 54.880001 19.959995 c
56.240002 19.959995 l
56.240002 25.079994 l
56.240002 26.879993 54.720001 28.559994 53.120003 29.479994 c
53.119999 29.48 l
h
60.400002 39.560001 m
60.400002 11.640001 l
61.760002 11.640001 l
62.000004 11.640001 62.200001 11.840001 62.200001 12.080001 c
62.200001 39.959999 l
60.84 39.959999 l
60.599998 39.959999 60.400002 39.799999 60.400002 39.559998 c
60.400002 39.560001 l
h
76.919998 19.959999 m
79.68 19.959999 81.879997 22.24 81.879997 25 c
81.879997 39.560001 l
81.879997 39.800003 81.68 40 81.439995 40 c
71.399994 40 l
68.639992 40 66.439995 37.759998 66.439995 35 c
66.439995 32.919998 l
66.439995 30.119999 68.639992 27.879997 71.399994 27.879997 c
79.639992 27.879997 l
79.87999 27.879997 80.039993 27.719997 80.079994 27.439997 c
80.079994 24.839996 l
80.079994 23.079996 78.679993 21.639996 76.919991 21.639996 c
68.55999 21.639996 l
68.359993 21.639996 68.159988 21.439995 68.159988 21.199995 c
68.159988 19.959995 l
76.919991 19.959995 l
76.919998 19.959999 l
h
71.400002 38.240002 m
80.080002 38.240002 l
80.080002 29.400002 l
80 29.480001 79.880005 29.560001 79.760002 29.560001 c
71.400002 29.560001 l
69.639999 29.560001 68.239998 31.000002 68.239998 32.760002 c
68.239998 35.080002 l
68.239998 36.84 69.639999 38.240002 71.400002 38.240002 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
